# Automatically indent a newly created line to the same number of tabs and/or spaces as the previous line (or as the next line if the previous line is the beginning of a paragraph).
set autoindent

# Enable mouse support, if available for your system. When enabled, mouse clicks can be used to place the cursor, set the mark (with a double click), and execute shortcuts.
set mouse

# Display lines that exceed the screen’s width over multiple screen lines.
#set softwrap

# Use a tab size of number columns. The value of number must be greater than 0. The default value is 8.
set tabsize 2

# Display line numbers to the left of the text area.
#set linenumbers

# Constantly display the cursor position (line number, column number, and character number) on the status bar
set constantshow

# Make search case-sensitive for better accuracy
set casesensitive

# When Home is pressed anywhere but at the very beginning of non-whitespace characters on a line,
# the cursor will jump to that beginning (either forwards or backwards).
# If the cursor is already at that position, it will jump to the true beginning of the line.
set smarthome

# When saving a file, back up the previous version of it, using the current filename suffixed with a tilde (~).
set backup

# Make and keep not just one backup file, but make and keep a uniquely numbered one every time a file is saved
set backupdir "~/.backup"

# For the interface, use bold instead of reverse video.
#set boldtext

# Convert typed tabs to spaces.
#set tabstospaces

# Read a file into a new buffer by default.
#set multibuffer

# Enable vim-style file locking when editing files.
#set locking

# Save the last hundred search strings and replacement strings and executed commands, so they can be easily reused in later sessions.
#set historylog

# Don’t automatically add a newline when a text does not end with one. (This can cause you to save non-POSIX text files.)
#set nonewlines

# Remove trailing whitespace from wrapped lines when automatic hard-wrapping occurs or when text is justified.
set trimblanks

# Disable automatic conversion of files from DOS/Mac format.
#set noconvert

# For the 200 most recent files, log the last position of the cursor, and place it at that position again upon reopening such a file.
set positionlog

# Set the regular expression for matching the quoting part of a line.
#set quotestr "(//.*|#.*)"

# Do quick status-bar blanking: status-bar messages will disappear after 1 keystroke instead of 25.
#set quickblank

# Detect word boundaries differently by treating punctuation characters as parts of words.
#set wordbounds

# Specify which other characters (besides the normal alphanumeric ones) should be considered as parts of words.
#set wordchars "characters"

# Let an unmodified Backspace or Delete erase the marked region (instead of a single character, and without affecting the cutbuffer).
#set zap

# When doing soft line wrapping, wrap lines at whitespace instead of always at the edge of the screen.
#set atblanks

# Automatically hard-wrap the current line when it becomes overlong.
#set breaklonglines

# Interpret the Delete and Backspace keys differently so that both Backspace and Delete work properly.
#set rebinddelete

# Do not use the line below the title bar, leaving it entirely blank.
#set emptyline

# Make the cursor visible in the file browser (putting it on the highlighted item) and in the help viewer
#set showcursor

# Scroll the buffer contents per half-screen instead of per line.
set jumpyscrolling

# Make the ’Cut Text’ command (normally ^K) cut from the current cursor position to the end of the line, instead of cutting the entire line
#set cutfromcursor

# Set the operating directory. This makes nano set up something similar to a chroot.
#set operatingdir "path/to/your/safe-directory"

# Preserve the ^Q (XON) and ^S (XOFF) sequences so data being sent to the editor can be stopped and started.
#set preserve

# Set the target width for justifying and automatic hard-wrapping at this number of columns. If the value is 0 or less, wrapping will occur at the width of the screen minus number columns,
# allowing the wrap point to vary along with the width of the screen if the screen is resized. The default value is -8.
#set fill 8

# Use the given program to do spell checking and correcting.
#set speller "program [argument ...]"

# Save a file by default in Unix format. This overrides nano’s default behavior of saving a file in the format that it had. (This option has no effect when you also use --noconvert.)
#set unix

# Expert Mode: don’t show the Shortcut List at the bottom of the screen.
#set nohelp

# Make Ctrl+Right stop at word ends instead of beginnings.
#set afterends

# Interpret escape sequences directly (instead of asking ncurses to translate them).
# If you need this option to get your keyboard to work properly, please report a bug. 
# Using this option disables nano’s mouse support.
#set rawsequences

# Use this color combination for the status bar when an error message is displayed.
#set errorcolor fgcolor,bgcolor

# Use this color combination for the concise function descriptions in the two help lines at the bottom of the screen.
#set functioncolor fgcolor,bgcolor

# Do regular-expression searches by default. Regular expressions in nano are of the extended type (ERE).
set regexp

# ---Shortcut key bindings---

bind ^C copy main       # CTRC+C - Copy
bind ^V paste all       # CTRL+V - Past

# --- Colors inspired by a hacker-style theme ---

# Set the title bar color (cyan on black)
set titlecolor green,black

# Set the status bar color (green on black for hacker-style)
set statuscolor green,black

# Highlight selected text (green on black for a cyber look)
set selectedcolor black,cyan
